class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def isBalance(self, root: TreeNode) -> bool:
        def height(node):
            if not node:
                return 0
            left = height(node.left)
            right = height(node.right)
            
            if left == -1 or right == -1 or abs(left - right) > 1:
                return -1  # if detect tree is not balanced, return -1
            
            return max(left, right) + 1            
        
        return height(root) != -1  # if contain -1, return not balanced
    
"""
Ta s·∫Ω ki·ªÉm tra c√¢y v√≠ d·ª• sau:

        3
       / \
      9   20
         /  \
        15   7
üî• DFS s·∫Ω duy·ªát theo th·ª© t·ª± sau:

dfs(9) ‚Üí Tr·∫£ v·ªÅ 1 (v√¨ 9 kh√¥ng c√≥ con).
dfs(15) ‚Üí Tr·∫£ v·ªÅ 1 (v√¨ 15 kh√¥ng c√≥ con).
dfs(7) ‚Üí Tr·∫£ v·ªÅ 1 (v√¨ 7 kh√¥ng c√≥ con).
dfs(20):
T√≠nh c√¢y con tr√°i (15): Chi·ªÅu cao = 1.
T√≠nh c√¢y con ph·∫£i (7): Chi·ªÅu cao = 1.
Kh√¥ng m·∫•t c√¢n b·∫±ng ‚Üí Tr·∫£ v·ªÅ 2.
dfs(3):
T√≠nh c√¢y con tr√°i (9): Chi·ªÅu cao = 1.
T√≠nh c√¢y con ph·∫£i (20): Chi·ªÅu cao = 2.
Ch√™nh l·ªách |1 - 2| ‚â§ 1 ‚Üí C√¢n b·∫±ng ‚Üí Tr·∫£ v·ªÅ 3.
K·∫øt qu·∫£: True (C√¢y c√¢n b·∫±ng).


T·∫°i sao tr·∫£ v·ªÅ -1 gi√∫p t·ªëi ∆∞u h√≥a?
Gi·∫£ s·ª≠ c√¢y m·∫•t c√¢n b·∫±ng:
        1
       / 
      2  
     / 
    3   
   /
  4   
dfs(4) ‚Üí Tr·∫£ v·ªÅ 1.
dfs(3):
T√≠nh c√¢y con tr√°i (4): Chi·ªÅu cao = 1.
C√¢y con ph·∫£i = None ‚Üí Chi·ªÅu cao = 0.
Ch√™nh l·ªách |1 - 0| ‚â§ 1 ‚Üí Tr·∫£ v·ªÅ 2.
dfs(2):
C√¢y con tr√°i (3): Chi·ªÅu cao = 2.
C√¢y con ph·∫£i = None ‚Üí Chi·ªÅu cao = 0.
Ch√™nh l·ªách |2 - 0| > 1 ‚Üí Tr·∫£ v·ªÅ -1 (m·∫•t c√¢n b·∫±ng).
dfs(1):
C√¢y con tr√°i (2) ƒë√£ tr·∫£ v·ªÅ -1 ‚Üí Ngay l·∫≠p t·ª©c tr·∫£ v·ªÅ -1 (kh√¥ng c·∫ßn t√≠nh ti·∫øp).
"""
root = TreeNode(3)
root.left = TreeNode(9)
root.right = TreeNode(20, TreeNode(1), TreeNode(2))

solution = Solution()
print(solution.isBalance(root))